//
//  main.swift
//  RockPaperScissors
//
//  Created by Ariana Rodríguez on 23/01/25.
//

import Foundation

/// Representation of and option to play
///
/// # Implementation
/// Use a custom init to handle the user input, add a case for an invalid input.
///
/// Usage:
///```swift
///let userOption = Option("1")
///print(userOption)
///```
///
///Output:
///```
///Optional(RockPaperScissors.Option.Paper)
///```
enum Option: String, CaseIterable {
    case Rock
    case Paper
    case Scissors
    case Quit
    case Invalid
    
    init?(input: Int) {
        switch input {
        case 0:
            self = .Rock
        case 1:
            self = .Paper
        case 2:
            self = .Scissors
        case 3:
            self = .Quit
        default:
            self = .Invalid
        }
    }
}

/// Representation of the game result
enum GameState {
    case won
    case lost
    case tie
}

// MARK: Block functions
/// Display options that can be selected to play with the computer
/// - returns: an string (`String`) that represent a list of options
/// - note: the function do not save the option selected by the user
///
/// # Implementation:
/// To display the options must iterate all  enum (`Option`) cases
///
/// Usage:
///```swift
///let optionsMessage = displayOptions()
///print(displayOptions)
///```
///
///Output:
///```
///Select an option
///0 - Rock
///1 - Paper
///2 - Scissors
///3 - Quit
///```

func displayOptions() -> String {
    var optionsMessage = "Select an option\n"
    for (index, option) in Option.allCases.enumerated() {
        guard option != Option.Invalid else {
            return optionsMessage
        }
        optionsMessage = optionsMessage + "\(index) - \(option.rawValue)\n"
    }
    return optionsMessage
}

/// Handle user input
/// - parameters:
///     - inputText:  the text of type  (`String`) that user writes as input
/// - returns: an enum (`Option`) case that represent a selected option
/// - note: the function do not save the option selected by the user
///
/// # Implementation:
/// To handle the input create an enum (`Option`) using its custom init
///
/// Usage:
///```swift
///let userOption = readUserOption("1")
///print(userOption)
///```
///
///Output:
///```
///Optional(RockPaperScissors.Option.Paper)
///```
func readUserInput(_ inputText: String?) -> Option {
    let inputAsInt = Int(inputText ?? "") ?? -1
    guard let userOption = Option(input: inputAsInt) else {
        return .Invalid
    }
    
    return userOption
}

/// Generate a random option for computer
/// - returns: an enum (`Option`) case that represent a random option
/// - note: the function do not save the option selected by the computer
///
/// # Implementation:
/// To handle the input create an enum (`Option`) using its custom init
///
/// Usage:
///```swift
///let randomOption = generateRandomOption()
///print(randomOption)
///```
///
///Output:
///```
///Optional(RockPaperScissors.Option.Scissors)
///```
func generateRandomOption() -> Option {
    let randomElement = (0...2).randomElement()
    
    guard let randomElement,
          let randomOption = Option(input: randomElement) else {
        return .Invalid
    }
    return randomOption
}

/// Evaluates the game based on the user and computer options
///  - parameters:
///     - userOption: the option selected by the user of type (`Option`)
///     - computerOption: the option generated by the computer of type (`Option`)
///  - returns: an enum (`GameState`) case that represent the result of the game
///  - note: the function do not save the state of the game
///
///  # Implementation
///  To evaluate the options using an isolate function instead of (`GameState`) custom init to practice both
///
///  Usage:
///```swift
///let gameState = play(userOption: .Rock, computerOption: .Paper)
///print(gameState)
///```
///
///Output:
///```
///Optional(RockPaperScissors.GameState.Lost)
///```
func play(userOption: Option, computerOption: Option) -> GameState? {
    var gameState: GameState?
    
    if userOption == computerOption {
        gameState = .tie
    } else if userOption == .Rock && computerOption == .Scissors
                || userOption == .Scissors && computerOption == .Paper
                || userOption == .Paper && computerOption == .Rock {
        gameState = .won
    } else {
        gameState = .lost
    }
    
    return gameState
}

// MARK: Main function
/// Implementation of the classic game "Rock, Paper or Scissor" where the user can play with the computer.
///
/// # Implementation
///  - The program should use a bucle to be able to play until the user exit
///  - Handle invalid output with clear messages
///  - Uses a random number generator to select the computer answer
///
/// Usage:
///```swift
///main()
///```
///
/// Output:
///```
///Select an option
///0 - Rock
///1 - Paper
///2 - Scissors
///3 - Quit
///1
///Has elegido Paper
///El ordenador ha elegido Rock
///Ganaste! Paper vence a Rock
///```
func main() {
    var userOption: Option = .Invalid
    let computerOption = generateRandomOption()
    
    while true {
        print(displayOptions())
        userOption = readUserInput(readLine())
        
        guard userOption != .Quit else {
            break
        }
        
        // I use an if since the return guard brokes the while, you could see last commit to test the bug
        if userOption == .Invalid {
            print("\nOpción inválida, selecciona una opción de la lista\n")
        } else {
            print("Has elegido \(userOption.rawValue)")
            print("El ordenador ha elegido \(computerOption.rawValue)")
            
            guard let gameState = play(userOption: userOption, computerOption: computerOption) else {
                return
            }
            
            switch gameState {
            case .won:
                print("Ganaste! \(userOption) vence a \(computerOption)\n")
            case .lost:
                print("Perdiste! \(computerOption) vence a \(userOption)\n")
            case .tie:
                print("Es un empate!\n")
            }
        }
    }
}

main()
